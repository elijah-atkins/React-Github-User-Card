{"version":3,"sources":["components/UserPage.jsx","components/NavBar.jsx","components/Followers.jsx","App.js","serviceWorker.js","index.js"],"names":["UserPage","blog","user","className","src","avatar_url","alt","login","name","href","html_url","bio","location","NavBar","changeUser","useState","searchTerm","setSearchTerm","htmlFor","id","type","placeholder","value","onChange","e","target","onClick","Followers","followers","following","followView","setFollowView","console","log","follow","followArr","map","follower","key","flipFollow","disabled","App","setUser","data","setData","setFollowers","setFollowing","useEffect","axios","get","then","response","catch","error","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"6PA0BeA,EAxBE,SAAC,GAAc,IACVC,EADFC,EAAW,EAAXA,KAMhB,OACI,yBAAKC,UAAU,YAEX,yBAAKA,UAAU,WACX,yBAAKC,IAAKF,EAAKG,WAAYC,IAAKJ,EAAKK,SAEzC,yBAAKJ,UAAU,YACX,wBAAIA,UAAU,YAAYD,EAAKM,MAC/B,wBAAIL,UAAU,aAAY,uBAAGM,KAAMP,EAAKQ,UAAWR,EAAKK,QACxD,uBAAGJ,UAAU,OAAOD,EAAKS,IAAL,eAAmBT,EAAKS,KAAQ,MACpD,2BAAIT,EAAKU,SAAL,oBAA6BV,EAAKU,UAAa,MACnD,2BAAIV,EAAKD,MAhBHA,EAgBmBC,EAAKD,KAdlC,0CAAe,uBAAGQ,KAAM,UAAYR,GAAOA,KAcD,SCWvCY,EA5BA,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAAiB,EACGC,mBAAS,IADZ,mBAC1BC,EAD0B,KACdC,EADc,KASjC,OACE,yBAAKd,UAAU,UACb,sCACA,yBAAKA,UAAU,aACf,2BAAOe,QAAQ,QAAf,WACA,2BACEC,GAAG,OACHC,KAAK,OACLZ,KAAK,OACLa,YAAY,cACZC,MAAON,EACPO,SAlBe,SAACC,GACpBP,EAAcO,EAAEC,OAAOH,UAmBrB,4BAAQI,QAjBS,WACnBZ,EAAWE,KAgBT,aCaSW,EAlCG,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,UAAgB,EACRd,oBAAS,GADD,mBACrCe,EADqC,KACzBC,EADyB,KAE5CC,QAAQC,IAAIJ,GAEZ,IAAMK,EAAS,SAACC,GACZ,OACI,yBAAKhC,UAAU,eACVgC,EAAUC,KAAI,SAACC,EAASlB,GAAV,OACX,uBAAGmB,IAAKnB,EAAIV,KAAM4B,EAAS3B,UAC3B,yBAAKP,UAAU,eACX,yBAAKA,UAAU,cACX,yBAAKC,IAAKiC,EAAShC,WAAYC,IAAK+B,EAAS9B,SAEjD,yBAAKJ,UAAU,eAAekC,EAAS9B,MAAvC,YAOdgC,EAAa,WACfR,GAAeD,IAEnB,OACI,6BACCA,EAAa,6BAAK,4BAAQU,UAAQ,GAAhB,aAAmC,4BAAQd,QAASa,GAAjB,cAAuD,6BAAK,4BAAQb,QAASa,GAAjB,aAA+C,4BAAQC,UAAQ,GAAhB,cACnJN,EAAbJ,EAAoBF,EAAkBC,KCuBhCY,EA3CH,WAAO,IAAD,EACQ1B,mBAAS,iBADjB,mBACTb,EADS,KACHwC,EADG,OAEQ3B,mBAAS,IAFjB,mBAET4B,EAFS,KAEHC,EAFG,OAGkB7B,mBAAS,IAH3B,mBAGTa,EAHS,KAGEiB,EAHF,OAIkB9B,mBAAS,IAJ3B,mBAITc,EAJS,KAIEiB,EAJF,KA8BhB,OApBAC,qBAAU,WACRC,IAAMC,IAAN,uCAA0C/C,IACzCgD,MAAK,SAAAC,GACJP,EAAQO,EAASR,MACjBK,IAAMC,IAAN,uCAA0C/C,EAA1C,eACCgD,MAAK,SAAAC,GACJN,EAAaM,EAASR,SAExBK,IAAMC,IAAN,uCAA0C/C,EAA1C,eACCgD,MAAK,SAAAC,GACJL,EAAaK,EAASR,YAGzBS,OAAO,SAAAC,GACNrB,QAAQC,IAAI,UAAWoB,QAIxB,CAACnD,IAGF,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAClB,kBAAC,EAAD,CAAQW,WA3BO,SAACZ,GAClBwC,EAAQxC,OA4BN,kBAAC,EAAD,CAAUA,KAAMyC,IAChB,kBAAC,EAAD,CAAWf,UAAWA,EAAWC,UAAWA,MCjC9ByB,QACW,cAA7BC,OAAO3C,SAAS4C,UAEe,UAA7BD,OAAO3C,SAAS4C,UAEhBD,OAAO3C,SAAS4C,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAAAgB,GACJA,EAAaC,gBAEdf,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMe,c","file":"static/js/main.3d1a6796.chunk.js","sourcesContent":["import React from 'react';\n\nconst UserPage = ({ user }) => {\n    const userBlog = (blog) => {\n        return(\n            <span>Website: <a href={'http://' + blog}>{blog}</a></span>\n        )\n    }\n    return (\n        <div className=\"git-card\">\n\n            <div className=\"git-img\">\n                <img src={user.avatar_url} alt={user.login} />\n            </div>\n            <div className=\"git-data\">\n                <h1 className=\"git-name\">{user.name}</h1>\n                <h2 className=\"git-login\"><a href={user.html_url}>{user.login}</a></h2>\n                <p className=\"bio\">{user.bio ? `Bio: ${user.bio}` : null}</p>\n                <p>{user.location ? `Location: ${user.location}` : null}</p>\n                <p>{user.blog ? userBlog(user.blog) : null}</p>\n            </div>\n        </div>\n\n    )\n};\n\nexport default UserPage;","import React, { useState } from \"react\";\n\nconst NavBar = ({ changeUser }) => {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const handleChange = (e) => {\n    setSearchTerm(e.target.value);\n  };\n  const handleSubmit = () => {\n    changeUser(searchTerm);\n  };\n\n  return (\n    <div className=\"navbar\">\n      <h1>GitHub</h1>\n      <div className=\"searchbar\">\n      <label htmlFor=\"name\">Search:</label>\n      <input\n        id=\"name\"\n        type=\"text\"\n        name=\"user\"\n        placeholder=\"Github User\"\n        value={searchTerm}\n        onChange={handleChange}\n      />\n      <button onClick={handleSubmit}>Submit</button>\n      </div>\n    </div>\n  );\n};\n\nexport default NavBar;\n","import React, { useState } from 'react';\n\n\nconst Followers = ({ followers, following }) => {\n    const [followView, setFollowView] = useState(true)\n    console.log(following)\n\n    const follow = (followArr) => {\n        return (\n            <div className=\"follow-grid\">\n                {followArr.map((follower,id) => (\n                    <a key={id} href={follower.html_url}>\n                    <div className=\"follow-card\">\n                        <div className=\"follow-img\">\n                            <img src={follower.avatar_url} alt={follower.login}></img>\n                        </div>\n                        <div className=\"follow-name\">{follower.login} </div>\n                    </div></a>\n                ))}\n            </div>\n        )\n    }\n\n    const flipFollow = () => {\n        setFollowView(!followView);\n    }\n    return (\n        <div>\n        {followView ? <div><button disabled>Followers</button><button onClick={flipFollow}>Following</button></div>: <div><button onClick={flipFollow}>Followers</button><button disabled>Following</button></div>}\n        {followView ? follow(followers):follow(following)}\n        \n        </div>\n        \n\n    )\n};\n\nexport default Followers;","import React, { useEffect, useState} from 'react';\nimport './scss/index.scss';\nimport axios from 'axios';\nimport UserPage from './components/UserPage';\nimport NavBar from './components/NavBar';\nimport Followers from './components/Followers';\n\n\n\nconst App = () => {\n  const [user, setUser] = useState('elijah-atkins');\n  const [data, setData] = useState([]);\n  const [followers, setFollowers] = useState([]);\n  const [following, setFollowing] = useState([]); \n\n  const changeUser = (user) => {\n    setUser(user)\n  }\n\n  useEffect(() => {\n    axios.get(`https://api.github.com/users/${user}`)\n    .then(response => {\n      setData(response.data);\n      axios.get(`https://api.github.com/users/${user}/followers`)\n      .then(response => {\n        setFollowers(response.data);\n      })\n      axios.get(`https://api.github.com/users/${user}/following`)\n      .then(response => {\n        setFollowing(response.data);\n      })\n    })\n    .catch( error =>{\n      console.log('Error: ', error)\n    })\n\n\n  }, [user]); \n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <NavBar changeUser={changeUser} />\n      </header>\n      <UserPage user={data}/>\n      <Followers followers={followers} following={following} />\n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}